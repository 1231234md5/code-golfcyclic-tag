#!/usr/bin/perl

use strict;
use warnings;

use Digest::MD5 'md5_base64';
use IPC::Open2 'open2';

system qw(svgo -q -f assets);

my $css = slurp('assets/codemirror.css')
    . slurp('assets/style.css') =~ s|svg\(([^#]+)(.+)\)|svg($1, $2)|egr;

$css = run($css, qw(csso /dev/stdin));

my $jsHole   = `java -jar /*.jar --assume_function_wrapper assets/{codemirror{,-*},hole}.js`;
my $jsScores = `java -jar /*.jar assets/scores.js`;

my $cssPath      = md5_base64($css)      =~ y|+/|-_|r;
my $jsHolePath   = md5_base64($jsHole)   =~ y|+/|-_|r;
my $jsScoresPath = md5_base64($jsScores) =~ y|+/|-_|r;

my $favicon = hexify(slurp('assets/favicon.ico'));

my      $cssBr = run($css,      qw/brotli/);
my      $cssGz = run($css,      qw/gzip -9/);
my   $jsHoleBr = run($jsHole,   qw/brotli/);
my   $jsHoleGz = run($jsHole,   qw/gzip -9/);
my $jsScoresBr = run($jsScores, qw/brotli/);
my $jsScoresGz = run($jsScores, qw/gzip -9/);

printf "     cssBr = %d bytes\n", length      $cssBr;
printf "     cssGz = %d bytes\n", length      $cssGz;
printf "  jsHoleBr = %d bytes\n", length   $jsHoleBr;
printf "  jsHoleGz = %d bytes\n", length   $jsHoleGz;
printf "jsScoresBr = %d bytes\n", length $jsScoresBr;
printf "jsScoresGz = %d bytes\n", length $jsScoresGz;

$_ = hexify($_) for $cssBr, $cssGz, $jsHoleBr, $jsHoleGz, $jsScoresBr, $jsScoresGz;

open my $fh, '>', 'routes/assets.go';
print $fh <<EOF;
package routes

const      cssPath = "/assets/$cssPath"
const   jsHolePath = "/assets/$jsHolePath"
const jsScoresPath = "/assets/$jsScoresPath"

var favicon = []byte{$favicon}

var cssBr = []byte{$cssBr}
var cssGz = []byte{$cssGz}

var jsHoleBr = []byte{$jsHoleBr}
var jsHoleGz = []byte{$jsHoleGz}

var jsScoresBr = []byte{$jsScoresBr}
var jsScoresGz = []byte{$jsScoresGz}
EOF

sub hexify {
    my $i = 0;
    join ',', map +( "\n" x !($i++ % 15) ) . "0x$_", unpack '(H2)*', pop;
}

sub run {
    my ( $data, @cmd ) = @_;

    local $/;

    open2( my $out, my $in, @cmd );
    print $in $data;
    close $in;

    scalar <$out>;
}

sub slurp { local ( @ARGV, $/ ) = @_; scalar <> }

sub svg {
    my ( $file, $fill ) = @_;

    $_ = slurp("assets/$file.svg");

    s/FILL/$fill/g;
    s/#/%23/g;
    s/"/'/g;

    qq(url("data:image/svg+xml,$_"));
}
