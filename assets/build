#!/usr/bin/perl

use v5.26;
use warnings;

use Digest::MD5 'md5_base64';
use IPC::Open2 'open2';

system qw(svgo -q -f assets/includes);

open my $fh, '>', 'routes/assets.go';

print $fh <<GO;
package routes

import (
	"net/http"
	"strings"

	"github.com/julienschmidt/httprouter"
)

func asset(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	switch r.URL.Path {
GO

my ( %data, %paths );

for (<assets/*.{css,ico,js}>) {
    say;

    my $data = slurp($_);

    s|^assets/||;

    my $name = s/\.(\w)/\U$1/r;

    if ( $_ eq 'favicon.ico' ) {
        $data{$name} = $data;

        print $fh <<'GO';
	case "/favicon.ico":
		w.Write(faviconIco)
GO

        next;
    }

    $data =~ s|/\* include ([^ ]+) +\*/|slurp("assets/includes/$1")|eg;

    if (/\.css$/) {
        $data =~ s|svg\(([^#]+)(.+)\)|svg($1, $2)|eg;

        $data = run($data, 'csso');
    }
    else {
        my @cmd = (
            qw(java -jar /closure-compiler.jar),
            qw(--assume_function_wrapper --language_out ES_2017),
        );

        push @cmd, qw(--externs assets/includes/externs.js -O ADVANCED)
            if $_ eq 'scores.js';

        $data = run( $data, @cmd );
    }

    $data{"${name}Br"} = run($data, 'brotli');

    # Zopfli can't stream https://github.com/google/zopfli/issues/17
    open my $tmp, '>', '/tmp/zopfli';
    print $tmp $data;
    close $tmp;

    $data{"${name}Gz"} = `zopfli -c /tmp/zopfli`;

    my $mime = /\.css$/ ? 'text/css' : 'application/javascript';
    my $path = $paths{$name} = '/assets/' . md5_base64($data) =~ y|+/|-_|r;

    print $fh <<GO;
	case ${name}Path:
		w.Header()["Cache-Control"] = []string{"max-age=9999999,public"}
		w.Header()["Content-Type"] = []string{"$mime"}

		if strings.Contains(r.Header.Get("Accept-Encoding"), "br") {
			w.Header()["Content-Encoding"] = []string{"br"}
			w.Write(${name}Br)
		} else {
			w.Header()["Content-Encoding"] = []string{"gzip"}
			w.Write(${name}Gz)
		}
GO
}

print $fh "\t}\n}\n\n";
print $fh qq/const ${_}Path = "$paths{$_}"\n/ for sort keys %paths;
print $fh "\n";

for ( sort keys %data ) {
    printf "%12s = %5d bytes\n", $_, length $data{$_};

    my $i = 0;
    my $data = join ',',
        map +( "\n" x !($i++ % 15) ) . "0x$_", unpack '(H2)*', $data{$_};

    print $fh "var $_ = []byte{$data}\n\n";
}

sub run {
    my ( $data, @cmd ) = @_;

    local $/;

    open2( my $out, my $in, @cmd );
    print $in $data;
    close $in;

    scalar <$out>;
}

sub slurp { local ( @ARGV, $/ ) = @_; scalar <> }

sub svg {
    my ( $file, $fill ) = @_;

    local $_ = slurp("assets/includes/$file.svg");

    s/FILL/$fill/g;
    s/#/%23/g;
    s/"/'/g;

    qq(url("data:image/svg+xml,$_"));
}
